<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>maths on Project F - FPGA Development</title>
    <link>https://projectf.io/tags/maths/</link>
    <description>Recent content in maths on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2020 Will Green, Project F</copyright>
    <lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://projectf.io/tags/maths/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Division in Verilog</title>
      <link>https://projectf.io/posts/division-in-verilog/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/division-in-verilog/</guid>
      <description>Division is a fundamental arithmetic operation; one we take for granted in most contexts. FPGAs are different; Verilog can&amp;rsquo;t synthesize division: we need to do it ourselves. In this FPGA recipe, we&amp;rsquo;re going to look at a simple division algorithm for positive integers and fixed-point numbers. This method takes one cycle per bit: 32 cycles for 32-bit numbers.
Revised 2020-07-28. Feedback to @WillFlux is most welcome.
Division Defined Before we get to the design, it helps be familiar with some terminology.</description>
    </item>
    
    <item>
      <title>Fixed Point Numbers in Verilog</title>
      <link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid>
      <description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.
This post is part of a series of handy recipes to solve common FPGA development problems.</description>
    </item>
    
  </channel>
</rss>