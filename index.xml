<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project F</title>
    <link>https://projectf.io/</link>
    <description>Recent content on Project F</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2020 Will Green, Project F</copyright>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://projectf.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>People who are really serious about software should make their own hardware.
Alan Kay, Creative Think seminar, 1982
 This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program in Arduino, Python, or JavaScript, then you shouldn&amp;rsquo;t have any trouble.</description>
    </item>
    
    <item>
      <title>Initialize Memory in Verilog</title>
      <link>https://projectf.io/posts/initialize-memory-in-verilog/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/initialize-memory-in-verilog/</guid>
      <description>It&amp;rsquo;s common for a simulation or firmware to need data loading into a memory array, ram, or rom. Fortunately, Verilog provides the $readmemh and $readmemb functions for this very purpose. Unfortunately, there is a dearth of good Verilog documentation online, so using them can be harder than it should be. This article explains the syntax and provides plenty of examples, including how to do this in Xilinx Vivado.
This is part of a new series of handy recipes to solve common FPGA development problems.</description>
    </item>
    
    <item>
      <title>FPGA Tooling on Ubuntu 20.04</title>
      <link>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</guid>
      <description>Ubuntu 20.04 (AKA Focal Fossa) includes updated tools and a snappier desktop (hooray). In this post I test common FPGA tools for compatibility with the beta release of Ubuntu 20.04. These tests are in no way exhaustive: I try using the applications as I normally do with an eye to exercising the main functionality.
 Tested: Verilator, nMigen, Vivado In Progress: Yosys, nextpnr, Quartus, Planned: RISC-V GCC, SpinalHDL, iCEBreaker toolchain, SymbiYosys  I&amp;rsquo;ve been having some hardware support issues with Ubuntu 20.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://projectf.io/posts/icebreaker-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/icebreaker-install/</guid>
      <description>Installing iCEBreaker Toolchain Perquisites apt install build-essential clang bison flex libreadline-dev \  gawk tcl-dev libffi-dev git mercurial graphviz \  xdot pkg-config python python3 libftdi-dev \  qt5-default python3-dev libboost-all-dev cmake libeigen3-dev git clone https://github.com/cliffordwolf/icestorm.git icestorm cd icestorm make -j$(nproc) sudo make install
git clone https://github.com/YosysHQ/nextpnr nextpnr cd nextpnr cmake -DARCH=ice40 -DCMAKE_INSTALL_PREFIX=/usr/local . make -j$(nproc) sudo make install</description>
    </item>
    
  </channel>
</rss>