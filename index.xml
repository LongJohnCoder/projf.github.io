<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project F - FPGA Development</title>
    <link>https://projectf.io/</link>
    <description>Recent content on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>©2020 Will Green, Project F</copyright>
    <lastBuildDate>Tue, 22 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://projectf.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>He is Archimedes, Mick Jagger, Salvador Dalí, and Richard Feynman, all rolled into one.
The Guardian, John Horton Conway: the world&amp;rsquo;s most charismatic mathematician (2015)
 Welcome back to Exploring FPGA Graphics. In previous posts, we raced the beam: every frame the entire screen was generated from scratch. In this fourth part, we&amp;rsquo;re going to draw on a bitmap and drive the display from that. Bitmaps allow for more complex graphics, but require memory and increase latency.</description>
    </item>
    
    <item>
      <title>FPGA Memory Types</title>
      <link>https://projectf.io/posts/fpga-memory-types/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-memory-types/</guid>
      <description>Designing with FPGAs involves many types of memory, some familiar from other devices, but some that are specific to FPGAs. This post gives a quick overview of the different flavours, together with their strengths and weaknesses, and some sample designs. This guide includes external memory types, such as SRAM and HBM, that are used in CPUs and GPUs, so much of what is said here is generally applicable, but the focus is on FPGAs.</description>
    </item>
    
    <item>
      <title>FPGA Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part we got an introduction to FPGA graphics; now we&amp;rsquo;re ready to put our graphical skills to work recreating the arcade classic: Pong.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, drawing starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>Division in Verilog</title>
      <link>https://projectf.io/posts/division-in-verilog/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/division-in-verilog/</guid>
      <description>Division is a fundamental arithmetic operation; one we take for granted in most contexts. FPGAs are different; Verilog can&amp;rsquo;t synthesize division: we need to do it ourselves. In this FPGA recipe, we&amp;rsquo;re going to look at a simple division algorithm for positive integers and fixed-point numbers. This method takes one cycle per bit: 32 cycles for 32-bit numbers.
Revised 2020-07-28. Feedback to @WillFlux is most welcome.
Division Defined Before we get to the design, it helps be familiar with some terminology.</description>
    </item>
    
    <item>
      <title>Video Timings: VGA, SVGA, 720p, 1080p</title>
      <link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid>
      <description>To work with standard monitors and TVs, you need to use the correct video timings. This recipe includes the timings for four standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 all at 60 Hz.
CRT monitors typically support higher refresh rates in addition to 60 Hz, such as 72 and 85 Hz, but most LCD monitors do not. There are an increasing number of televisions and monitors that do support high refresh rates, but these are beyond the scope of this guide.</description>
    </item>
    
    <item>
      <title>FPGA Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part we created a version of the classic game, Pong. In this third part, we take inspiration from an even earlier game: Computer Space and work with sprites, bitmap fonts, and starfields.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, drawing starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>Fixed Point Numbers in Verilog</title>
      <link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid>
      <description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.
This post is part of a series of handy recipes to solve common FPGA development problems.</description>
    </item>
    
    <item>
      <title>Exploring FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>In all beginnings dwells a magic force
Herman Hesse, Stages from The Glass Bead Game
 Welcome to Exploring FPGA Graphics. In this series we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, drawing starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 2</title>
      <link>https://projectf.io/posts/hello-arty-2/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>People who are really serious about software should make their own hardware.
Alan Kay, Creative Think seminar (1982)
 This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program in Arduino, Python, or JavaScript, then you shouldn&amp;rsquo;t have any trouble.</description>
    </item>
    
    <item>
      <title>Initialize Memory in Verilog</title>
      <link>https://projectf.io/posts/initialize-memory-in-verilog/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/initialize-memory-in-verilog/</guid>
      <description>It&amp;rsquo;s common for a simulation or firmware to need data loading into a memory array, ram, or rom. Fortunately, Verilog provides the $readmemh and $readmemb functions for this very purpose. Unfortunately, there is a dearth of good Verilog documentation online, so using them can be harder than it should be. This article explains the syntax and provides plenty of examples, including how to do this in Xilinx Vivado.
If you want to learn more about FPGA memory itself, see FPGA Memory Types.</description>
    </item>
    
    <item>
      <title>FPGA Tooling on Ubuntu 20.04</title>
      <link>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</guid>
      <description>In this post, I test common FPGA tools for compatibility with Ubuntu 20.04 (AKA Focal Fossa), and my regular desktop OS: Pop!_OS 20.04. These tests are in no way exhaustive: I have tried using the applications as I usually do to exercise the main functionality. I have also included instructions for building the tools from source when available. This is my final planned update for this post (July 2020).
 Tested: IceStorm Tools, nextpnr, nMigen, Verilator, Vivado, Yosys Incomplete: Quartus  Updated 2020-07-30.</description>
    </item>
    
    <item>
      <title>About Project F</title>
      <link>https://projectf.io/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/about/</guid>
      <description>There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it creating your own arcade game, handling unusual hardware interfaces, mining cryptocurrencies, building your own robot, analysing oodles of data, or even developing your own CPU. I find working with FPGAs gives me a sense of delight so often lacking in modern software development.
An FPGA is like a giant virtual breadboard or Lego for electronics: if you can imagine it, you can probably build it.</description>
    </item>
    
    <item>
      <title>Project F Sitemap</title>
      <link>https://projectf.io/sitemap/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/sitemap/</guid>
      <description>FPGA Graphics Learn graphics at the hardware level, create games and demos, improve your FPGA design skills:
 Exploring FPGA Graphics - how displays work and simple animated colour graphics FPGA Pong - race the beam to create the arcade classic FPGA Ad Astra - animated starfields, hardware sprites, and bitmap fonts Life on Screen - bitmaps with Earthrise and Conway&amp;rsquo;s Game of Life  Hello A three-part introduction to FPGA development and Verilog with the Digilent Arty board:</description>
    </item>
    
  </channel>
</rss>